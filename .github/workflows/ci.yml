name: CI

on:
  push:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  # debug: test
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - uses: denoland/setup-deno@v1
      with:
        deno-version: v1.x

    - run: deno fmt --check
    - run: cargo fmt --check

    - run: cargo build --verbose
    - run: cargo test --verbose
    - run: cargo doc

  # release: `x86_64-unknown-linux-gnu` (GNU/Linux)
  # release: `x86_64-unknown-linux-musl` (OpenWrt)
  build_gnu:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    # `x86_64-unknown-linux-gnu`
    - run: cargo build --release --target x86_64-unknown-linux-gnu -p fmlsd
    - run: cargo build --release --target x86_64-unknown-linux-gnu -p fmls-cli
    - run: cargo build --release --target x86_64-unknown-linux-gnu -p fmls-r2d

    # upload
    - run: |
        tar --zstd -cvf fmls_release_x86_64-unknown-linux-gnu.tar.zst \
        target/x86_64-unknown-linux-gnu/release/fmlsd \
        target/x86_64-unknown-linux-gnu/release/fmls-cli \
        target/x86_64-unknown-linux-gnu/release/fmls-r2d
    - uses: actions/upload-artifact@v3
      with:
        name: fmls_release_x86_64-unknown-linux-gnu
        path: fmls_release_x86_64-unknown-linux-gnu.tar.zst

    # `x86_64-unknown-linux-musl`
    - run: rustup target add x86_64-unknown-linux-musl
    - run: |
        cargo build --release --target x86_64-unknown-linux-musl -p fmlsd --no-default-features --features openwrt,quic-quiche && \
        cargo build --release --target x86_64-unknown-linux-musl -p fmls-cli --no-default-features --features openwrt,quic-quiche
      env:
        CC_x86_64_unknown_linux_musl: gcc
        CXX: g++

    # upload
    - run: |
        tar --zstd -cvf fmls_release_openwrt_x86_64-unknown-linux-musl.tar.zst \
        target/x86_64-unknown-linux-musl/release/fmlsd \
        target/x86_64-unknown-linux-musl/release/fmls-cli
    - uses: actions/upload-artifact@v3
      with:
        name: fmls_release_openwrt_x86_64-unknown-linux-musl
        path: fmls_release_openwrt_x86_64-unknown-linux-musl.tar.zst

  # release: `aarch64-unknown-linux-gnu` (GNU/Linux)
  build_gnu_aarch64:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - uses: taiki-e/install-action@v2
      with:
        tool: cross

    # `aarch64-unknown-linux-gnu`
    - run: cross build --release --target aarch64-unknown-linux-gnu -p fmlsd
    - run: cross build --release --target aarch64-unknown-linux-gnu -p fmls-cli
    - run: cross build --release --target aarch64-unknown-linux-gnu -p fmls-r2d

    # upload
    - run: |
        tar --zstd -cvf fmls_release_aarch64-unknown-linux-gnu.tar.zst \
        target/aarch64-unknown-linux-gnu/release/fmlsd \
        target/aarch64-unknown-linux-gnu/release/fmls-cli \
        target/aarch64-unknown-linux-gnu/release/fmls-r2d
    - uses: actions/upload-artifact@v3
      with:
        name: fmls_release_aarch64-unknown-linux-gnu
        path: fmls_release_aarch64-unknown-linux-gnu.tar.zst

  # release: `aarch64-linux-android` (Android)
  build_android:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - uses: nttld/setup-ndk@v1
      id: setup-ndk
      with:
        ndk-version: r25c

    # `aarch64-linux-android`
    - run: rustup target add aarch64-linux-android
    - run: |
        export PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH && \
        cargo build --release --target aarch64-linux-android -p fmlsd --no-default-features --features quic-quiche
      env:
        ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
        CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER: aarch64-linux-android28-clang
        AR_aarch64_linux_android: llvm-ar
        CC_aarch64_linux_android: aarch64-linux-android28-clang

    # upload
    - run: |
        tar --zstd -cvf fmls_release_aarch64-linux-android.tar.zst \
        target/aarch64-linux-android/release/fmlsd
    - uses: actions/upload-artifact@v3
      with:
        name: fmls_release_aarch64-linux-android
        path: fmls_release_aarch64-linux-android.tar.zst

  # release: `mipsel-unknown-linux-musl` (OpenWrt)
  build_openwrt_mipsel:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - uses: denoland/setup-deno@v1
      with:
        deno-version: v1.x
    - uses: taiki-e/install-action@v2
      with:
        tool: cross

    # patch code
    - run: make patch_code
    - run: patch -p1 < p/openwrt/mipsel_patch_1.patch

    # `mipsel-unknown-linux-musl`
    - run: cross build --release --target mipsel-unknown-linux-musl -p fmlsd --no-default-features --features openwrt,quic-s2n
    - run: cross build --release --target mipsel-unknown-linux-musl -p fmls-cli --no-default-features --features openwrt,quic-s2n

    # upload
    - run: |
        tar --zstd -cvf fmls_release_openwrt_mipsel-unknown-linux-musl.tar.zst \
        target/mipsel-unknown-linux-musl/release/fmlsd \
        target/mipsel-unknown-linux-musl/release/fmls-cli
    - uses: actions/upload-artifact@v3
      with:
        name: fmls_release_openwrt_mipsel-unknown-linux-musl
        path: fmls_release_openwrt_mipsel-unknown-linux-musl.tar.zst

# TODO `aarch64-unknown-linux-musl` (OpenWrt)
# TODO `x86_64-pc-windows-msvc` (Windows)
